#!/usr/bin/env python3
"""
üß† CONTENT MANAGER INTELIGENTE - Con √≠ndices de confianza y conversaciones profundas
==================================================================================
M√≥dulo avanzado para generaci√≥n de contenido y categorizaci√≥n inteligente
Incluye √≠ndices de confianza, conversaciones en profundidad y an√°lisis de calidad

MEJORAS IMPLEMENTADAS:
- √çndices de confianza para cada categorizaci√≥n
- Conversaciones "en profundidad" con contenido completo
- Inferencia inteligente de preguntas por tipo de t√≠tulo
- M√©tricas de calidad y cercan√≠a
- Sistema de retroalimentaci√≥n para mejora continua
- Plantillas contextuales espec√≠ficas por tipo
- An√°lisis de art√≠culos con baja confianza
"""

import re
import json
import hashlib
import math
from typing import Dict, List, Tuple, Optional, Any
from collections import defaultdict, Counter
from datetime import datetime


class TitleInferenceEngine:
    """Motor de inferencia inteligente para generar preguntas basadas en el t√≠tulo"""
    
    def __init__(self):
        self.title_patterns = {
            # PERSONAS (biograf√≠as)
            'persona': {
                'patterns': [
                    r'^[A-Z][a-z√°√©√≠√≥√∫√±√º]+ [A-Z][a-z√°√©√≠√≥√∫√±√º]+$',  # Nombre Apellido
                    r'^[A-Z][a-z√°√©√≠√≥√∫√±√º]+ [A-Z][a-z√°√©√≠√≥√∫√±√º]+ [A-Z][a-z√°√©√≠√≥√∫√±√º]+$',  # Nombre Apellido Apellido
                    r'(?:naci√≥|nacido|nacida|fallecido|muri√≥)',
                ],
                'questions': [
                    "¬øQui√©n fue {title}?",
                    "¬øCu√°ndo naci√≥ {title}?", 
                    "¬øD√≥nde naci√≥ {title}?",
                    "¬øQu√© hizo {title}?",
                    "¬øPor qu√© es conocido {title}?",
                    "H√°blame en profundidad sobre la vida de {title}"
                ],
                'weight': 9
            },
            
            # FECHAS Y EVENTOS HIST√ìRICOS
            'fecha_evento': {
                'patterns': [
                    r'\b(?:19|20)\d{2}\b',  # A√±os
                    r'\b(?:siglo (?:XVI|XVII|XVIII|XIX|XX|XXI))\b',
                    r'(?:guerra|batalla|revoluci√≥n|independencia)',
                    r'(?:enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)',
                ],
                'questions': [
                    "¬øQu√© sucedi√≥ en {title}?",
                    "¬øCu√°ndo ocurri√≥ {title}?",
                    "¬øD√≥nde tuvo lugar {title}?",
                    "¬øCu√°les fueron las consecuencias de {title}?",
                    "¬øQui√©nes participaron en {title}?",
                    "Expl√≠came detalladamente todo sobre {title}"
                ],
                'weight': 8
            },
            
            # LUGARES GEOGR√ÅFICOS
            'lugar': {
                'patterns': [
                    r'(?:ciudad|pueblo|municipio|localidad)',
                    r'(?:provincia|regi√≥n|departamento|estado)',
                    r'(?:pa√≠s|naci√≥n|rep√∫blica|reino)',
                    r'(?:r√≠o|monta√±a|lago|valle|isla)',
                ],
                'questions': [
                    "¬øD√≥nde est√° {title}?",
                    "¬øEn qu√© pa√≠s se encuentra {title}?",
                    "¬øCu√°ntos habitantes tiene {title}?",
                    "¬øCu√°les son las caracter√≠sticas de {title}?",
                    "¬øCu√°l es la historia de {title}?",
                    "Descr√≠beme completamente {title} con todos sus detalles"
                ],
                'weight': 8
            },
            
            # ESPECIES BIOL√ìGICAS
            'especie': {
                'patterns': [
                    r'\b[A-Z][a-z]+ [a-z]+\b',  # Nombre cient√≠fico
                    r'(?:especie|g√©nero|familia) de',
                    r'(?:mam√≠fero|ave|pez|reptil|insecto|planta)',
                ],
                'questions': [
                    "¬øQu√© tipo de especie es {title}?",
                    "¬øD√≥nde vive {title}?",
                    "¬øCu√°les son las caracter√≠sticas de {title}?",
                    "¬øC√≥mo se reproduce {title}?",
                    "¬øDe qu√© se alimenta {title}?",
                    "Explica todo lo que sabes sobre {title} en detalle"
                ],
                'weight': 7
            },
            
            # OBRAS ART√çSTICAS
            'obra_arte': {
                'patterns': [
                    r'(?:√°lbum|disco|canci√≥n|single)',
                    r'(?:pel√≠cula|libro|novela|obra)',
                    r'(?:pintura|escultura|cuadro)',
                ],
                'questions': [
                    "¬øQu√© es {title}?",
                    "¬øQui√©n cre√≥ {title}?",
                    "¬øCu√°ndo se lanz√≥ {title}?",
                    "¬øDe qu√© trata {title}?",
                    "¬øCu√°l es la importancia de {title}?",
                    "Analiza profundamente {title} y su significado"
                ],
                'weight': 7
            },
            
            # CONCEPTOS T√âCNICOS/CIENT√çFICOS
            'concepto': {
                'patterns': [
                    r'(?:teor√≠a|ley|principio|concepto)',
                    r'(?:m√©todo|t√©cnica|proceso|sistema)',
                    r'(?:enfermedad|s√≠ndrome|trastorno)',
                ],
                'questions': [
                    "¬øQu√© es {title}?",
                    "¬øC√≥mo funciona {title}?",
                    "¬øPara qu√© sirve {title}?",
                    "¬øQui√©n desarroll√≥ {title}?",
                    "¬øCu√°les son las aplicaciones de {title}?",
                    "Explica en detalle todo sobre {title} y sus implicaciones"
                ],
                'weight': 6
            }
        }
    
    def infer_type(self, title: str) -> str:
        """Infiere el tipo de contenido basado solo en el t√≠tulo - versi√≥n mejorada"""
        text = title.lower()
        
        # Reglas espec√≠ficas prioritarias
        # 1. Nombres cient√≠ficos (dos palabras en lat√≠n)
        if re.match(r'^[A-Z][a-z]+ [a-z]+$', title) and len(title.split()) == 2:
            # Verificar si contiene palabras t√≠picas de especies
            if any(word in text for word in ['panthera', 'canis', 'felis', 'homo', 'sus', 'equus']):
                return 'especie'
        
        # 2. Eventos hist√≥ricos con n√∫meros o palabras clave
        if any(word in text for word in ['guerra', 'batalla', 'revoluci√≥n', 'independencia', 'conflicto']):
            return 'fecha_evento'
        
        # 3. Obras literarias/art√≠sticas
        if any(phrase in text for phrase in ['don ', 'el ', 'la ', 'los ', 'las ']) and len(title.split()) > 2:
            if any(word in text for word in ['quijote', 'miserables', 'divina', 'comedia', 'novel', 'obra']):
                return 'obra_arte'
        
        # 4. Nombres de personas (patr√≥n m√°s estricto)
        words = title.split()
        if len(words) == 2:
            # Verificar que sean nombres propios t√≠picos
            if all(word[0].isupper() and word[1:].islower() for word in words):
                # Excluir t√≠tulos que no son nombres
                if not any(excluded in text for excluded in ['guerra', 'batalla', 'de la', 'del ']):
                    return 'persona'
        
        # Sistema de puntuaci√≥n original como fallback
        best_type = 'concepto'  # default
        max_score = 0
        
        for type_name, config in self.title_patterns.items():
            score = 0
            
            for pattern in config['patterns']:
                matches = len(re.findall(pattern, text, re.IGNORECASE))
                score += matches * 2
            
            # Bonus por longitud apropiada del t√≠tulo
            title_words = len(title.split())
            if type_name == 'persona' and 2 <= title_words <= 3:
                score += 3
            elif type_name == 'lugar' and 1 <= title_words <= 4:
                score += 2
            elif type_name == 'fecha_evento' and title_words >= 3:
                score += 2
            
            weighted_score = score * config['weight']
            
            if weighted_score > max_score:
                max_score = weighted_score
                best_type = type_name
        
        return best_type
    
    def infer_question_type(self, title: str, content: str) -> Tuple[str, float]:
        """Infiere el tipo de pregunta m√°s apropiado para el t√≠tulo"""
        text = f"{title} {content}".lower()
        
        best_type = 'concepto'  # default
        max_score = 0
        
        for type_name, config in self.title_patterns.items():
            score = 0
            
            for pattern in config['patterns']:
                matches = len(re.findall(pattern, text, re.IGNORECASE))
                score += matches * 2
            
            # Bonus por longitud apropiada del t√≠tulo
            title_words = len(title.split())
            if type_name == 'persona' and 2 <= title_words <= 3:
                score += 3
            elif type_name == 'lugar' and 1 <= title_words <= 4:
                score += 2
            
            weighted_score = score * config['weight']
            
            if weighted_score > max_score:
                max_score = weighted_score
                best_type = type_name
        
        # Calcular confianza (0.0 a 1.0)
        confidence = min(max_score / 20.0, 1.0) if max_score > 0 else 0.3
        
        return best_type, confidence
    
    def generate_questions(self, title: str, question_type: str) -> List[str]:
        """Genera preguntas apropiadas para el tipo identificado"""
        if question_type not in self.title_patterns:
            question_type = 'concepto'
        
        questions = []
        templates = self.title_patterns[question_type]['questions']
        
        for template in templates:
            question = template.format(title=title)
            questions.append(question)
        
        return questions


class ConfidenceMetrics:
    """Sistema de m√©tricas de confianza para evaluar calidad de categorizaci√≥n"""
    
    def __init__(self):
        self.metrics_history = []
        self.low_confidence_articles = []
        
    def calculate_confidence(self, title: str, content: str, category: str, 
                           subcategory: str, question_type: str) -> Dict[str, float]:
        """Calcula m√∫ltiples m√©tricas de confianza"""
        
        # 1. Confianza de categorizaci√≥n (basada en keywords y patterns)
        category_confidence = self._calculate_category_confidence(content, category)
        
        # 2. Confianza de tipo de pregunta
        question_confidence = self._calculate_question_confidence(title, question_type)
        
        # 3. Confianza de calidad de contenido
        content_confidence = self._calculate_content_confidence(content)
        
        # 4. Confianza de especificidad del t√≠tulo
        title_confidence = self._calculate_title_confidence(title)
        
        # 5. Confianza global (promedio ponderado)
        global_confidence = (
            category_confidence * 0.3 +
            question_confidence * 0.25 +
            content_confidence * 0.25 +
            title_confidence * 0.2
        )
        
        metrics = {
            'global_confidence': global_confidence,
            'category_confidence': category_confidence,
            'question_confidence': question_confidence,
            'content_confidence': content_confidence,
            'title_confidence': title_confidence,
            'content_length': len(content),
            'title_words': len(title.split())
        }
        
        # Registrar m√©tricas
        self.metrics_history.append({
            'title': title,
            'category': category,
            'metrics': metrics,
            'timestamp': datetime.now().isoformat()
        })
        
        # Identificar art√≠culos de baja confianza
        if global_confidence < 0.6:
            self.low_confidence_articles.append({
                'title': title,
                'category': category,
                'confidence': global_confidence,
                'issues': self._identify_issues(metrics)
            })
        
        return metrics
    
    def _calculate_category_confidence(self, content: str, category: str) -> float:
        """Confianza de la categorizaci√≥n"""
        category_keywords = {
            'arte': ['m√∫sica', '√°lbum', 'canci√≥n', 'pintura', 'artista', 'obra'],
            'geografia': ['ciudad', 'pa√≠s', 'regi√≥n', 'provincia', 'territorio'],
            'historia': ['naci√≥', 'muri√≥', 'siglo', 'guerra', 'batalla', 'hist√≥rico'],
            'biologia': ['especie', 'g√©nero', 'familia', 'animal', 'planta'],
            'ciencias': ['teor√≠a', 'investigaci√≥n', 'cient√≠fico', 'descubrimiento'],
            'deportes': ['equipo', 'club', 'liga', 'campeonato', 'deportivo'],
            'politica': ['gobierno', 'presidente', 'pol√≠tico', 'partido'],
            'tecnologia': ['software', 'internet', 'tecnolog√≠a', 'digital'],
            'medicina': ['enfermedad', 'tratamiento', 'm√©dico', 'hospital'],
            'economia': ['empresa', 'mercado', 'econom√≠a', 'negocio'],
            'educacion': ['universidad', 'escuela', 'educaci√≥n', 'ense√±anza']
        }
        
        if category not in category_keywords:
            return 0.5
        
        keywords = category_keywords[category]
        content_lower = content.lower()
        
        matches = sum(1 for keyword in keywords if keyword in content_lower)
        confidence = min(matches / len(keywords), 1.0)
        
        return max(confidence, 0.1)
    
    def _calculate_question_confidence(self, title: str, question_type: str) -> float:
        """Confianza del tipo de pregunta inferido"""
        title_length = len(title.split())
        
        if question_type == 'persona' and 2 <= title_length <= 4:
            return 0.9
        elif question_type == 'lugar' and 1 <= title_length <= 3:
            return 0.8
        elif question_type == 'fecha_evento' and any(word.isdigit() for word in title.split()):
            return 0.85
        elif question_type == 'especie' and title_length == 2:
            return 0.8
        else:
            return 0.6
    
    def _calculate_content_confidence(self, content: str) -> float:
        """Confianza basada en la calidad del contenido"""
        content_length = len(content)
        sentences = content.count('.')
        
        if content_length < 100:
            length_score = content_length / 100.0
        elif content_length > 5000:
            length_score = max(0.5, 1.0 - (content_length - 5000) / 10000.0)
        else:
            length_score = 1.0
        
        structure_score = min(sentences / 10.0, 1.0) if sentences > 0 else 0.1
        
        return (length_score + structure_score) / 2.0
    
    def _calculate_title_confidence(self, title: str) -> float:
        """Confianza basada en la especificidad del t√≠tulo"""
        title_words = len(title.split())
        
        if 1 <= title_words <= 5:
            return 0.9
        elif 6 <= title_words <= 8:
            return 0.7
        else:
            return 0.5
    
    def _identify_issues(self, metrics: Dict[str, float]) -> List[str]:
        """Identifica problemas espec√≠ficos en m√©tricas bajas"""
        issues = []
        
        if metrics['category_confidence'] < 0.5:
            issues.append("Categorizaci√≥n incierta")
        if metrics['content_confidence'] < 0.5:
            issues.append("Contenido de baja calidad")
        if metrics['question_confidence'] < 0.5:
            issues.append("Tipo de pregunta inadecuado")
        if metrics['title_confidence'] < 0.5:
            issues.append("T√≠tulo poco espec√≠fico")
        if metrics['content_length'] < 100:
            issues.append("Contenido muy corto")
        
        return issues
    
    def get_low_confidence_report(self) -> Dict:
        """Genera reporte de art√≠culos con baja confianza"""
        return {
            'total_low_confidence': len(self.low_confidence_articles),
            'articles': self.low_confidence_articles[-50:],
            'common_issues': self._get_common_issues(),
            'recommendations': self._get_recommendations()
        }
    
    def _get_common_issues(self) -> Dict[str, int]:
        """Analiza problemas m√°s comunes"""
        issue_counts = Counter()
        for article in self.low_confidence_articles:
            for issue in article['issues']:
                issue_counts[issue] += 1
        return dict(issue_counts.most_common(10))
    
    def _get_recommendations(self) -> List[str]:
        """Genera recomendaciones de mejora"""
        common_issues = self._get_common_issues()
        recommendations = []
        
        if 'Categorizaci√≥n incierta' in common_issues:
            recommendations.append("Mejorar patrones de keywords por categor√≠a")
        if 'Contenido muy corto' in common_issues:
            recommendations.append("Filtrar art√≠culos con contenido < 100 caracteres")
        if 'Tipo de pregunta inadecuado' in common_issues:
            recommendations.append("Refinar patrones de inferencia de preguntas")
        
        return recommendations


class IntelligentCategorizer:
    """Categorizador inteligente con sistema de confianza avanzado"""
    
    def __init__(self):
        self.setup_intelligent_patterns()
        self.setup_subcategory_patterns()  # ¬°FALTABA ESTA L√çNEA!
        self.setup_conversation_templates()
        self.title_inference = TitleInferenceEngine()
        self.confidence_metrics = ConfidenceMetrics()
        
        # Estad√≠sticas thread-safe (at√≥micas)
        self.category_corrections = defaultdict(int)
        self.confidence_scores = defaultdict(list)
        
    def setup_intelligent_patterns(self):
        """Configura patrones inteligentes mejorados"""
        
        # CATEGOR√çAS PRINCIPALES con patrones espec√≠ficos para alta confianza
        self.categories = {
            'arte': {
                'keywords': ['m√∫sica', '√°lbum', 'canci√≥n', 'banda', 'compositor', 'pintura', 'artista', 'obra', 'teatro', 'danza'],
                'patterns': [
                    r'\b(?:√°lbum|disco|canci√≥n|single)\b',
                    r'\b(?:banda|grupo musical|cantante|m√∫sico)\b',
                    r'\b(?:reggae|rock|pop|jazz|cl√°sica|folk)\b',
                    r'\b(?:pintor|escultor|artista|galer√≠a|museo)\b'
                ],
                'weight': 10
            },
            'geografia': {
                'keywords': ['pa√≠s', 'ciudad', 'regi√≥n', 'provincia', 'municipio', 'capital', 'territorio'],
                'patterns': [
                    r'\b(?:ciudad|pueblo|municipio|localidad)\b',
                    r'\b(?:provincia|regi√≥n|departamento|estado)\b',
                    r'\b(?:pa√≠s|naci√≥n|rep√∫blica|reino)\b',
                    r'\bes una (?:ciudad|provincia|regi√≥n|pa√≠s)\b'
                ],
                'weight': 8
            },
            'historia': {
                'keywords': ['naci√≥', 'muri√≥', 'biograf√≠a', 'vida', 'hist√≥rico', 'siglo', 'guerra', 'batalla'],
                'patterns': [
                    r'\b(?:naci√≥|nacido|nacida)\b.*\b(?:muri√≥|fallecido)\b',
                    r'\b(?:\d{4})\s*[-‚Äì]\s*(?:\d{4})\b',
                    r'\bfue un(?:a)? (?:escritor|pol√≠tico|militar)\b',
                    r'\b(?:siglo (?:XVIII|XIX|XX|XXI))\b'
                ],
                'weight': 9
            },
            'ciencias': {
                'keywords': ['cient√≠fico', 'investigaci√≥n', 'teor√≠a', 'experimento', 'm√©todo', 'descubrimiento'],
                'patterns': [
                    r'\b(?:teor√≠a|ley|principio|descubrimiento)\b',
                    r'\b(?:investigaci√≥n|experimento|estudio)\b',
                    r'\b(?:cient√≠fico|investigador|premio Nobel)\b'
                ],
                'weight': 7
            },
            'biologia': {
                'keywords': ['especie', 'g√©nero', 'familia', 'animal', 'planta', 'mam√≠fero', 'ave'],
                'patterns': [
                    r'\b(?:especie|g√©nero|familia) de\b',
                    r'\b[A-Z][a-z]+ [a-z]+\b.*\b(?:especie|animal|planta)\b',
                    r'\b(?:mam√≠fero|ave|pez|reptil|insecto)\b'
                ],
                'weight': 8
            },
            'tecnologia': {
                'keywords': ['computadora', 'software', 'internet', 'tecnolog√≠a', 'digital', 'programa'],
                'patterns': [
                    r'\b(?:software|hardware|programa|aplicaci√≥n)\b',
                    r'\b(?:internet|web|digital|tecnolog√≠a)\b'
                ],
                'weight': 7
            },
            'deportes': {
                'keywords': ['f√∫tbol', 'equipo', 'club', 'deportivo', 'liga', 'campeonato'],
                'patterns': [
                    r'\b(?:club|equipo) (?:de f√∫tbol|deportivo)\b',
                    r'\b(?:liga|campeonato|torneo)\b'
                ],
                'weight': 8
            },
            'politica': {
                'keywords': ['gobierno', 'presidente', 'ministro', 'pol√≠tico', 'partido', 'elecci√≥n'],
                'patterns': [
                    r'\b(?:presidente|ministro|gobernador)\b',
                    r'\b(?:partido pol√≠tico|gobierno)\b'
                ],
                'weight': 7
            },
            'medicina': {
                'keywords': ['enfermedad', 'tratamiento', 'm√©dico', 'hospital', 'salud'],
                'patterns': [
                    r'\b(?:enfermedad|s√≠ntoma|tratamiento)\b',
                    r'\b(?:m√©dico|doctor|hospital)\b'
                ],
                'weight': 7
            },
            'economia': {
                'keywords': ['empresa', 'mercado', 'econom√≠a', 'negocio', 'comercio'],
                'patterns': [
                    r'\b(?:empresa|corporaci√≥n)\b',
                    r'\b(?:mercado|econom√≠a)\b'
                ],
                'weight': 6
            },
            'educacion': {
                'keywords': ['universidad', 'colegio', 'escuela', 'educaci√≥n', 'ense√±anza'],
                'patterns': [
                    r'\b(?:universidad|colegio|escuela)\b',
                    r'\b(?:educaci√≥n|ense√±anza)\b'
                ],
                'weight': 6
            }
        }
        
        # PATRONES MUSICALES Y ART√çSTICOS ESPEC√çFICOS
        self.music_patterns = [
            r'\b(?:√°lbum|disco)\b.*\b(?:de|por)\b.*\b(?:banda|grupo|cantante|artista)\b',
            r'\b(?:banda|grupo)\b.*\b(?:√°lbum|disco|canci√≥n)\b',
            r'\b(?:single|sencillo)\b.*\b(?:de|por)\b',
            r'\b(?:reggae|rock|pop|jazz|blues|folk|metal|punk|electronic)\b.*\b(?:√°lbum|banda|artista)\b',
            r'\b(?:compositor|m√∫sico|cantante)\b.*\b(?:conocido|famoso)\b'
        ]
        
        # PATRONES ART√çSTICOS GENERALES
        self.art_patterns = [
            r'\b(?:pintor|escultor|artista)\b.*\b(?:conocido|famoso|cre√≥|pint√≥)\b',
            r'\b(?:obra|pintura|escultura)\b.*\b(?:de|por)\b.*\b(?:artista|pintor)\b',
            r'\b(?:estilo|movimiento)\b.*\b(?:art√≠stico|pict√≥rico)\b'
        ]
        
    def setup_conversation_templates(self):
        """Plantillas inteligentes basadas en tipo de contenido con preguntas en profundidad"""
        self.conversation_templates = {
            'persona': {
                'basic': [
                    "¬øQui√©n fue {topic}?",
                    "¬øCu√°ndo naci√≥ {topic}?",
                    "¬øCu√°l fue la principal contribuci√≥n de {topic}?"
                ],
                'deep': "Dame toda la informaci√≥n disponible sobre {topic}. Quiero conocer su biograf√≠a completa, obra, logros y legado hist√≥rico."
            },
            'lugar': {
                'basic': [
                    "¬øD√≥nde est√° {topic}?",
                    "¬øCu√°l es la importancia de {topic}?",
                    "¬øCu√°les son las caracter√≠sticas principales de {topic}?"
                ],
                'deep': "Proporciona informaci√≥n completa sobre {topic}. Incluye ubicaci√≥n exacta, historia, geograf√≠a, poblaci√≥n, econom√≠a, cultura y todos los detalles relevantes."
            },
            'fecha_evento': {
                'basic': [
                    "¬øQu√© sucedi√≥ en {topic}?",
                    "¬øCu√°ndo ocurri√≥ {topic}?",
                    "¬øCu√°l fue la importancia de {topic}?"
                ],
                'deep': "Explica completamente {topic}. Quiero conocer todos los antecedentes, el desarrollo del evento, las consecuencias y su significado hist√≥rico."
            },
            'especie': {
                'basic': [
                    "¬øQu√© tipo de especie es {topic}?",
                    "¬øD√≥nde vive {topic}?",
                    "¬øCu√°les son las caracter√≠sticas de {topic}?"
                ],
                'deep': "Dame informaci√≥n completa sobre {topic}. Incluye clasificaci√≥n taxon√≥mica, h√°bitat, comportamiento, alimentaci√≥n, reproducci√≥n, distribuci√≥n y estado de conservaci√≥n."
            },
            'obra_arte': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øQui√©n cre√≥ {topic}?",
                    "¬øCu√°ndo se cre√≥ {topic}?"
                ],
                'deep': "Analiza en profundidad {topic}. Quiero conocer todo sobre su creaci√≥n, contexto hist√≥rico, t√©cnica utilizada, significado, influencia cultural y recepci√≥n cr√≠tica."
            },
            'concepto': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øC√≥mo funciona {topic}?",
                    "¬øPara qu√© se utiliza {topic}?"
                ],
                'deep': "Explica exhaustivamente {topic}. Incluye definici√≥n completa, principios fundamentales, aplicaciones, desarrollo hist√≥rico y relevancia actual."
            },
            # Plantillas por categor√≠a (fallback)
            'arte': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øQui√©n cre√≥ {topic}?",
                    "¬øCu√°l es su importancia art√≠stica?"
                ],
                'deep': "Proporciona un an√°lisis art√≠stico completo de {topic}. Incluye todo sobre su creaci√≥n, estilo, contexto cultural, t√©cnica y significado en la historia del arte."
            },
            'geografia': {
                'basic': [
                    "¬øD√≥nde est√° {topic}?",
                    "¬øCu√°ntos habitantes tiene {topic}?",
                    "¬øCu√°les son sus caracter√≠sticas?"
                ],
                'deep': "Describe completamente {topic} desde todos los aspectos geogr√°ficos. Incluye ubicaci√≥n, demograf√≠a, geograf√≠a f√≠sica, econom√≠a, historia y caracter√≠sticas culturales."
            },
            'historia': {
                'basic': [
                    "¬øQui√©n fue {topic}?",
                    "¬øCu√°ndo vivi√≥ {topic}?",
                    "¬øPor qu√© es hist√≥rica‚Äãmente importante {topic}?"
                ],
                'deep': "Explica en detalle toda la importancia hist√≥rica de {topic}. Incluye contexto completo, eventos relevantes, influencia en su √©poca y legado hist√≥rico."
            },
            'ciencias': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øC√≥mo funciona {topic}?",
                    "¬øCu√°l es su importancia cient√≠fica?"
                ],
                'deep': "Proporciona una explicaci√≥n cient√≠fica completa de {topic}. Incluye principios te√≥ricos, funcionamiento, aplicaciones, investigaci√≥n actual y relevancia en el campo cient√≠fico."
            },
            'biologia': {
                'basic': [
                    "¬øQu√© tipo de ser vivo es {topic}?",
                    "¬øD√≥nde vive {topic}?",
                    "¬øC√≥mo se comporta {topic}?"
                ],
                'deep': "Dame informaci√≥n biol√≥gica completa sobre {topic}. Incluye taxonom√≠a, anatom√≠a, fisiolog√≠a, comportamiento, ecolog√≠a, evoluci√≥n y relaci√≥n con otros organismos."
            },
            'tecnologia': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øC√≥mo funciona {topic}?",
                    "¬øPara qu√© se usa {topic}?"
                ],
                'deep': "Explica completamente {topic} desde el punto de vista tecnol√≥gico. Incluye principios t√©cnicos, funcionamiento, aplicaciones, desarrollo hist√≥rico e impacto tecnol√≥gico."
            },
            'deportes': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øD√≥nde se practica {topic}?",
                    "¬øCu√°les son las reglas de {topic}?"
                ],
                'deep': "Describe completamente {topic} desde todos los aspectos deportivos. Incluye historia, reglas, t√©cnicas, competiciones importantes y figuras destacadas."
            },
            'politica': {
                'basic': [
                    "¬øQui√©n fue {topic}?",
                    "¬øQu√© cargo ocup√≥ {topic}?",
                    "¬øCu√°l fue su importancia pol√≠tica?"
                ],
                'deep': "Analiza completamente la figura pol√≠tica de {topic}. Incluye trayectoria pol√≠tica, ideolog√≠a, logros, controversias y impacto en la historia pol√≠tica."
            },
            'economia': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øC√≥mo funciona {topic}?",
                    "¬øCu√°l es su importancia econ√≥mica?"
                ],
                'deep': "Explica completamente {topic} desde el punto de vista econ√≥mico. Incluye principios econ√≥micos, funcionamiento, impacto en mercados y relevancia actual."
            },
            'medicina': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øC√≥mo se trata {topic}?",
                    "¬øCu√°les son los s√≠ntomas de {topic}?"
                ],
                'deep': "Proporciona informaci√≥n m√©dica completa sobre {topic}. Incluye definici√≥n, causas, s√≠ntomas, diagn√≥stico, tratamiento y pron√≥stico."
            },
            'educacion': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øD√≥nde se ense√±a {topic}?",
                    "¬øPara qu√© sirve {topic}?"
                ],
                'deep': "Explica completamente {topic} desde el punto de vista educativo. Incluye metodolog√≠a, objetivos, aplicaciones y relevancia en el sistema educativo."
            },
            # Template general mejorado
            'general': {
                'basic': [
                    "¬øQu√© es {topic}?",
                    "¬øCu√°l es la importancia de {topic}?",
                    "¬øCu√°les son las caracter√≠sticas principales de {topic}?"
                ],
                'deep': "Dame toda la informaci√≥n disponible sobre {topic}. Quiero conocer todos los detalles, contexto, importancia y cualquier aspecto relevante."
            }
        }
        
    def setup_subcategory_patterns(self):
        """Patrones r√°pidos para subcategor√≠as"""
        self.subcategory_patterns = {
            'arte': {
                'musica-albums': r'(?:√°lbum|disco)',
                'musica-reggae': r'(?:reggae|Jamaica)',
                'musica-rock': r'(?:rock|metal)',
                'pintura': r'(?:pintura|pintor)',
                'literatura': r'(?:novela|poeta|escritor)'
            },
            'geografia': {
                'paises': r'(?:pa√≠s|naci√≥n)',
                'ciudades': r'(?:ciudad|municipio)',
                'regiones': r'(?:regi√≥n|provincia)'
            },
            'historia': {
                'biografias': r'(?:naci√≥|nacido).*(?:muri√≥|fallecido)',
                'eventos': r'(?:guerra|batalla|revoluci√≥n)',
                'periodos': r'(?:siglo|√©poca|era)'
            }
        }
        
    def categorize_article_fast(self, title: str, content: str) -> Tuple[str, str, float]:
        """
        Categorizaci√≥n ultra-r√°pida optimizada para throughput masivo
        Returns: (category, subcategory, confidence)
        """
        text = f"{title} {content}".lower()
        
        # 1. VERIFICAR PATRONES MUSICALES Y ART√çSTICOS PRIMERO
        for pattern in self.music_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                subcategory = self.identify_subcategory_fast('arte', text)
                return 'arte', subcategory, 0.90
                
        for pattern in self.art_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                subcategory = self.identify_subcategory_fast('arte', text)
                return 'arte', subcategory, 0.85
        
        # 2. SCORING R√ÅPIDO POR CATEGOR√çA
        best_category = 'general'
        max_score = 0
        
        for category, config in self.categories.items():
            score = 0
            
            # Keywords (m√°s r√°pido que regex)
            for keyword in config['keywords']:
                if keyword in text:
                    score += 2
                    
            # Solo aplicar regex si ya hay score de keywords
            if score > 0:
                for pattern in config['patterns']:
                    if re.search(pattern, text, re.IGNORECASE):
                        score += 3
                        
                score *= config['weight']
                
                if score > max_score:
                    max_score = score
                    best_category = category
        
        # 3. CALCULAR CONFIANZA R√ÅPIDA
        confidence = min(max_score / 20.0, 1.0) if max_score > 0 else 0.3
        
        # 4. SUBCATEGOR√çA R√ÅPIDA
        subcategory = self.identify_subcategory_fast(best_category, text)
        
        return best_category, subcategory, confidence
        
    def identify_subcategory_fast(self, category: str, text: str) -> str:
        """Identificaci√≥n r√°pida de subcategor√≠a"""
        if category not in self.subcategory_patterns:
            return 'general'
            
        for subcategory, pattern in self.subcategory_patterns[category].items():
            if re.search(pattern, text, re.IGNORECASE):
                return subcategory
                
        return 'general'
    
    def generate_conversations_fast(self, title: str, content: str, category: str, subcategory: str) -> List[Dict]:
        """Generaci√≥n inteligente de conversaciones con an√°lisis en profundidad"""
        conversations = []
        
        # Inferir tipo de contenido desde el t√≠tulo
        content_type = self.title_inference.infer_type(title)
        
        # Obtener plantillas para este tipo
        templates = self.conversation_templates.get(content_type, self.conversation_templates['general'])
        
        # Generar preguntas b√°sicas (m√°ximo 3 para dejar espacio a la pregunta profunda)
        basic_questions = templates.get('basic', templates if isinstance(templates, list) else [])
        for question_template in basic_questions[:3]:  # M√°ximo 3 b√°sicas
            question = question_template.format(topic=title)
            
            # Generar respuesta contextual
            answer = self._generate_contextual_answer(question, title, content, content_type)
            
            # Calcular m√©tricas de confianza
            confidence = self.confidence_metrics.calculate_confidence(
                title=title,
                content=content,
                category=category,
                subcategory=subcategory,
                question_type=self.classify_question_type_fast(question)
            )
            
            conversations.append({
                'question': question,
                'answer': answer,
                'category': category,
                'subcategory': subcategory,
                'content_type': content_type,
                'confidence_score': confidence.get('global_confidence', 0.8),
                'conversation_type': self.classify_question_type_fast(question)
            })
        
        # SIEMPRE generar pregunta de an√°lisis en profundidad
        if 'deep' in templates:
            deep_question = templates['deep'].format(topic=title)
            deep_answer = self._generate_deep_analysis(title, content, content_type)
            
            confidence = self.confidence_metrics.calculate_confidence(
                title=title,
                content=content,
                category=category,
                subcategory=subcategory,
                question_type='deep_analysis'
            )
            
            conversations.append({
                'question': deep_question,
                'answer': deep_answer,
                'category': category,
                'subcategory': subcategory,
                'content_type': content_type,
                'confidence_score': confidence.get('global_confidence', 0.9),
                'conversation_type': 'deep_analysis',
                'analysis_type': 'comprehensive'
            })
            
        return conversations
        
    def _generate_contextual_answer(self, question: str, title: str, content: str, content_type: str) -> str:
        """Genera respuestas contextuales basadas en el tipo de pregunta y contenido"""
        
        # Determinar el tiempo verbal apropiado seg√∫n el tipo de entidad
        verb_tense = self._determine_verb_tense(title, content, content_type)
        
        # Buscar informaci√≥n espec√≠fica seg√∫n el tipo de pregunta
        if 'cu√°ndo' in question.lower() or 'a√±o' in question.lower():
            # Buscar fechas y eventos temporales
            dates = re.findall(r'\b(?:en )?(\d{1,2} de \w+ de \d{4}|\d{4}|\w+ de \d{4})\b', content)
            if dates:
                return f"En relaci√≥n a {title}, las fechas relevantes son: {', '.join(dates[:3])}"
                
        elif 'd√≥nde' in question.lower():
            # Buscar ubicaciones geogr√°ficas
            locations = re.findall(r'(?:en|de|desde) ([A-Z][a-z√°√©√≠√≥√∫√±√º][a-z√°√©√≠√≥√∫√±√º\s]+?)(?:[.,;]|$)', content)
            if locations:
                clean_locations = [loc.strip() for loc in locations[:2] if len(loc.strip()) > 2]
                if clean_locations:
                    return f"{title} se localiza o tiene relaci√≥n con: {', '.join(clean_locations)}"
        
        elif 'qui√©n' in question.lower():
            # Buscar personas mencionadas
            people = re.findall(r'\b([A-Z][a-z√°√©√≠√≥√∫√±√º]+ [A-Z][a-z√°√©√≠√≥√∫√±√º]+)\b', content)
            if people and content_type == 'persona':
                bio_info = self._extract_biographical_info(content, verb_tense)
                return f"{title} {bio_info}"
                
        elif 'qu√©' in question.lower():
            # Definiciones y descripciones con tiempo verbal apropiado
            first_sentence = self._extract_definition_sentence(content, title, verb_tense)
            if first_sentence:
                return first_sentence
        
        # Respuesta contextual gen√©rica pero informativa
        sentences = content.split('.')[:3]
        relevant_sentence = ""
        for sentence in sentences:
            sentence = sentence.strip()
            if 50 < len(sentence) < 300 and title.lower() in sentence.lower():
                relevant_sentence = sentence
                break
        
        if relevant_sentence:
            return relevant_sentence
        
        # Fallback inteligente por tipo de contenido con tiempo verbal correcto
        fallback_responses = {
            'persona': f"{title} {verb_tense['ser']} una persona notable cuya vida y obra han tenido impacto significativo.",
            'lugar': f"{title} {verb_tense['ser']} una ubicaci√≥n geogr√°fica con caracter√≠sticas e historia particulares.",
            'fecha_evento': f"{title} representa un acontecimiento hist√≥rico de importancia.",
            'especie': f"{title} {verb_tense['ser']} una especie biol√≥gica con caracter√≠sticas espec√≠ficas.",
            'obra_arte': f"{title} {verb_tense['ser']} una obra art√≠stica o cultural relevante.",
            'concepto': f"{title} {verb_tense['ser']} un concepto que requiere explicaci√≥n detallada."
        }
        
        return fallback_responses.get(content_type, f"{title} {verb_tense['ser']} un tema de inter√©s que merece explicaci√≥n detallada.")
    
    def _determine_verb_tense(self, title: str, content: str, content_type: str) -> dict:
        """Determina si usar 'es/fue' basado en el an√°lisis temporal"""
        
        # Para personas: detectar si est√°n vivas o muertas
        if content_type == 'persona':
            is_deceased = self._is_person_deceased(content)
            if is_deceased:
                return {'ser': 'fue', 'estar': 'estuvo', 'tener': 'tuvo'}
            else:
                return {'ser': 'es', 'estar': 'est√°', 'tener': 'tiene'}
        
        # Para organizaciones: detectar si siguen existiendo
        elif self._is_organization(content):
            is_defunct = self._is_organization_defunct(content)
            if is_defunct:
                return {'ser': 'fue', 'estar': 'estuvo', 'tener': 'tuvo'}
            else:
                return {'ser': 'es', 'estar': 'est√°', 'tener': 'tiene'}
        
        # Para eventos hist√≥ricos
        elif content_type == 'fecha_evento' or self._is_historical_event(content):
            return {'ser': 'fue', 'estar': 'estuvo', 'tener': 'tuvo'}
        
        # Default: presente
        return {'ser': 'es', 'estar': 'est√°', 'tener': 'tiene'}
    
    def _is_person_deceased(self, content: str) -> bool:
        """Detecta si una persona ha fallecido"""
        deceased_patterns = [
            r'\b(?:muri√≥|falleci√≥|fallecido|muerto|‚Ä†)\b',
            r'\b\d{4}\s*[-‚Äì]\s*\d{4}\b',  # A√±os de nacimiento-muerte
            r'\b(?:difunto|finado|extinto)\b',
            r'\b(?:fue enterrado|fue sepultado)\b',
            r'\b(?:su muerte|su fallecimiento)\b'
        ]
        
        for pattern in deceased_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                return True
        
        return False
    
    def _is_organization(self, content: str) -> bool:
        """Detecta si el art√≠culo es sobre una organizaci√≥n"""
        org_patterns = [
            r'\b(?:empresa|corporaci√≥n|compa√±√≠a|organizaci√≥n)\b',
            r'\b(?:fundada|creada|establecida) en\b',
            r'\b(?:club|equipo|banda|grupo)\b',
            r'\b(?:partido|movimiento|asociaci√≥n)\b',
            r'\b(?:gobierno|ministerio|departamento)\b'
        ]
        
        for pattern in org_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                return True
        
        return False
    
    def _is_organization_defunct(self, content: str) -> bool:
        """Detecta si una organizaci√≥n ya no existe"""
        defunct_patterns = [
            r'\b(?:desaparecida|extinta|disuelta|cerrada)\b',
            r'\b(?:fue disuelta|fue cerrada|ces√≥ sus operaciones)\b',
            r'\b(?:hasta \d{4}|termin√≥ en \d{4})\b',
            r'\b(?:ya no existe|no existe m√°s)\b',
            r'\b(?:ex-|antigua|former)\b',
            r'\b\d{4}\s*[-‚Äì]\s*\d{4}\b',  # A√±os de inicio-fin
            r'\b(?:quebr√≥|en bancarrota|liquidada)\b'
        ]
        
        for pattern in defunct_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                return True
        
        return False
    
    def _is_historical_event(self, content: str) -> bool:
        """Detecta si es un evento hist√≥rico"""
        historical_patterns = [
            r'\b(?:guerra|batalla|revoluci√≥n|conflicto)\b',
            r'\b(?:siglo|a√±o|√©poca|era)\b.*\b(?:XVIII|XIX|XX|XXI|\d{4})\b',
            r'\b(?:acontecimiento|evento|suceso) (?:hist√≥rico|importante)\b'
        ]
        
        for pattern in historical_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                return True
        
        return False
    
    def _generate_deep_analysis(self, title: str, content: str, content_type: str) -> str:
        """Genera an√°lisis en profundidad basado en el tipo de contenido"""
        
        # Para preguntas profundas, siempre incluir el contenido completo pero organizado
        clean_content = self._clean_and_organize_content(content)
        
        # Si el contenido es muy corto, devolver tal como est√°
        if len(clean_content) < 200:
            return clean_content
        
        # Si el contenido es largo, organizarlo por secciones
        if len(clean_content) > 2000:
            return self._organize_long_content(title, clean_content, content_type)
        
        # Para contenido medio, devolver completo con introducci√≥n contextual
        return f"**{title}**\n\n{clean_content}"
    
    def _clean_and_organize_content(self, content: str) -> str:
        """Limpia y organiza el contenido del art√≠culo"""
        
        # Eliminar elementos de Wiki markup que no aportan valor
        content = re.sub(r'\[\[Archivo:.*?\]\]', '', content)
        content = re.sub(r'\[\[Imagen:.*?\]\]', '', content)
        content = re.sub(r'\{\{.*?\}\}', '', content, flags=re.DOTALL)
        content = re.sub(r'miniatura\|.*?\|', '', content)
        content = re.sub(r'thumb\|.*?\|', '', content)
        content = re.sub(r'<ref.*?</ref>', '', content, flags=re.DOTALL)
        content = re.sub(r'<ref.*?/>', '', content)
        
        # Limpiar enlaces pero mantener el texto
        content = re.sub(r'\[\[([^|\]]+)\|([^\]]+)\]\]', r'\2', content)
        content = re.sub(r'\[\[([^\]]+)\]\]', r'\1', content)
        
        # Limpiar formato
        content = re.sub(r"'''([^']+)'''", r'\1', content)
        content = re.sub(r"''([^']+)''", r'\1', content)
        content = re.sub(r'==([^=]+)==', r'\n\n**\1**\n', content)
        content = re.sub(r'===([^=]+)===', r'\n\n***\1***\n', content)
        
        # Normalizar espacios
        content = re.sub(r'\n\s*\n\s*\n', '\n\n', content)
        content = re.sub(r' +', ' ', content)
        
        return content.strip()
    
    def _organize_long_content(self, title: str, content: str, content_type: str) -> str:
        """Organiza contenido largo por secciones"""
        
        # Dividir por secciones marcadas con **
        sections = re.split(r'\n\n\*\*([^*]+)\*\*\n', content)
        
        organized_parts = [f"**{title}**\n"]
        
        # Agregar resumen inicial (primeros p√°rrafos)
        first_part = sections[0].strip()
        if first_part:
            paragraphs = first_part.split('\n\n')
            intro = '\n\n'.join(paragraphs[:2])  # Primeros 2 p√°rrafos
            if intro:
                organized_parts.append(f"**Informaci√≥n General:**\n{intro}\n")
        
        # Agregar secciones organizadas
        for i in range(1, len(sections), 2):
            if i + 1 < len(sections):
                section_title = sections[i].strip()
                section_content = sections[i + 1].strip()
                
                if section_content and len(section_content) > 50:
                    # Limitar cada secci√≥n a un p√°rrafo razonable
                    section_paragraphs = section_content.split('\n\n')
                    section_summary = '\n\n'.join(section_paragraphs[:2])
                    organized_parts.append(f"**{section_title}:**\n{section_summary}\n")
        
        # Si no hay secciones bien definidas, dividir por p√°rrafos
        if len(organized_parts) == 1:
            paragraphs = content.split('\n\n')
            for i, para in enumerate(paragraphs[:5]):  # M√°ximo 5 p√°rrafos
                if len(para.strip()) > 100:
                    organized_parts.append(para.strip())
        
        result = '\n\n'.join(organized_parts)
        
        # Asegurar que no sea excesivamente largo
        if len(result) > 3000:
            result = result[:3000] + "...\n\n*[Art√≠culo completo disponible en la fuente original]*"
        
        return result
    
    def _analyze_person(self, title: str, paragraphs: List[str]) -> str:
        """An√°lisis profundo de personas"""
        analysis_parts = []
        
        # Informaci√≥n biogr√°fica
        for p in paragraphs[:2]:
            if any(keyword in p.lower() for keyword in ['naci√≥', 'nacido', 'nacida', 'vida', 'biograf√≠a']):
                analysis_parts.append(f"Biograf√≠a: {p}")
                break
        
        # Logros y obra
        for p in paragraphs:
            if any(keyword in p.lower() for keyword in ['obra', 'trabajo', 'carrera', 'logro', 'contribuci√≥n']):
                analysis_parts.append(f"Contribuciones: {p}")
                break
        
        # Legado
        for p in paragraphs:
            if any(keyword in p.lower() for keyword in ['legado', 'influencia', 'importancia', 'reconocimiento']):
                analysis_parts.append(f"Legado: {p}")
                break
        
        if not analysis_parts:
            analysis_parts = paragraphs[:3]
        
        return f"{title} - An√°lisis completo:\n\n" + "\n\n".join(analysis_parts)
    
    def _analyze_location(self, title: str, paragraphs: List[str]) -> str:
        """An√°lisis profundo de lugares"""
        return f"{title} - An√°lisis geogr√°fico completo:\n\n" + "\n\n".join(paragraphs[:3])
    
    def _analyze_event(self, title: str, paragraphs: List[str]) -> str:
        """An√°lisis profundo de eventos hist√≥ricos"""
        return f"{title} - An√°lisis hist√≥rico completo:\n\n" + "\n\n".join(paragraphs[:3])
    
    def _analyze_species(self, title: str, paragraphs: List[str]) -> str:
        """An√°lisis profundo de especies"""
        return f"{title} - An√°lisis biol√≥gico completo:\n\n" + "\n\n".join(paragraphs[:3])
    
    def _analyze_artwork(self, title: str, paragraphs: List[str]) -> str:
        """An√°lisis profundo de obras art√≠sticas"""
        return f"{title} - An√°lisis art√≠stico completo:\n\n" + "\n\n".join(paragraphs[:3])
    
    def _analyze_general(self, title: str, paragraphs: List[str]) -> str:
        """An√°lisis profundo general"""
        return f"{title} - An√°lisis detallado:\n\n" + "\n\n".join(paragraphs[:3])
    
    def _extract_definition_sentence(self, content: str, title: str, verb_tense: dict) -> str:
        """Extrae la oraci√≥n de definici√≥n principal con tiempo verbal apropiado"""
        sentences = content.split('.')
        for sentence in sentences[:5]:
            sentence = sentence.strip()
            if (title.lower() in sentence.lower() and 
                any(verb in sentence.lower() for verb in ['es', 'fue', 'son', 'era', 'constituye']) and
                50 < len(sentence) < 400):
                # Ajustar tiempo verbal en la oraci√≥n encontrada
                if 'fue' in sentence.lower() and verb_tense['ser'] == 'es':
                    sentence = re.sub(r'\bfue\b', 'es', sentence, flags=re.IGNORECASE)
                elif 'es' in sentence.lower() and verb_tense['ser'] == 'fue':
                    sentence = re.sub(r'\bes\b', 'fue', sentence, flags=re.IGNORECASE)
                return sentence
        return ""
    
    def _extract_biographical_info(self, content: str, verb_tense: dict) -> str:
        """Extrae informaci√≥n biogr√°fica clave con tiempo verbal apropiado"""
        bio_patterns = [
            r'(?:naci√≥|nacido|nacida).{0,100}',
            r'(?:fue|era).{0,100}',
            r'(?:\d{4}).{0,100}'
        ]
        
        for pattern in bio_patterns:
            matches = re.findall(pattern, content, re.IGNORECASE)
            if matches:
                bio_info = matches[0][:200]
                # Ajustar tiempo verbal
                if verb_tense['ser'] == 'fue':
                    bio_info = re.sub(r'\bes\b', 'fue', bio_info, flags=re.IGNORECASE)
                return bio_info
        
        return f"{verb_tense['ser']} una figura notable"
        
    def classify_question_type_fast(self, question: str) -> str:
        """Clasificaci√≥n r√°pida de tipo de pregunta"""
        if 'qu√© es' in question or 'define' in question:
            return 'definicion'
        elif 'cu√°ndo' in question or 'a√±o' in question:
            return 'temporal'
        elif 'd√≥nde' in question:
            return 'espacial'
        elif 'por qu√©' in question:
            return 'explicacion'
        else:
            return 'general'


class CategoryManager:
    """Gestor de categor√≠as con l√≠mite de 100 carpetas m√°ximo"""
    
    def __init__(self, max_categories: int = 100):
        self.max_categories = max_categories
        self.category_counts = defaultdict(int)
        self.subcategory_counts = defaultdict(lambda: defaultdict(int))
        self.final_categories = {}
        self.generic_categories = {}
        self.finalized = False
        self.total_articles = 0
        
    def register_category(self, category: str, subcategory: str = 'general'):
        """Registra una categor√≠a encontrada durante el procesamiento"""
        if self.finalized:
            return self.get_final_category(category, subcategory)
            
        self.category_counts[category] += 1
        self.subcategory_counts[category][subcategory] += 1
        self.total_articles += 1
        
        # Crear nombre de categor√≠a combinada
        return f"{category}-{subcategory}" if subcategory != 'general' else category
    
    def get_final_category(self, category: str, subcategory: str = 'general') -> str:
        """Obtiene la categor√≠a final despu√©s de la finalizaci√≥n"""
        if not self.finalized:
            return self.register_category(category, subcategory)
            
        # Intentar encontrar la combinaci√≥n exacta
        combination_name = f"{category}-{subcategory}" if subcategory != 'general' else category
        
        if combination_name in self.final_categories:
            return self.final_categories[combination_name]
            
        # Si la categor√≠a principal tiene una versi√≥n gen√©rica
        if category in self.generic_categories:
            return self.generic_categories[category]
            
        # Fallback a gen√©rico
        return 'generico'
    
    def get_category_stats(self) -> Dict:
        """Estad√≠sticas de las categor√≠as"""
        if not self.finalized:
            return {
                'status': 'not_finalized',
                'categories_found': len(self.category_counts),
                'total_articles': self.total_articles
            }
            
        return {
            'status': 'finalized',
            'total_categories_found': len(self.category_counts),
            'final_categories_count': len(self.final_categories),
            'total_articles': self.total_articles,
            'most_popular': dict(sorted(self.category_counts.items(), key=lambda x: x[1], reverse=True)[:10]),
            'final_categories': list(self.final_categories.keys()),
            'generic_categories': self.generic_categories
        }

    def finalize_categories(self):
        """Finaliza las categor√≠as - simplemente marca como finalizado para CategoryManager"""
        if not self.finalized:
            print(f"üè∑Ô∏è CATEGORYMANAGER: Finalizando {len(self.category_counts)} categor√≠as")
            self.finalized = True
            print(f"‚úÖ CATEGORYMANAGER: Categor√≠as finalizadas")

    def get_all_categories(self) -> List[str]:
        """Retorna todas las categor√≠as encontradas"""
        return list(self.category_counts.keys())


class ContentManager:
    """Gestor de contenido principal optimizado para m√°ximo throughput"""
    
    def __init__(self, use_category_manager: bool = True):
        self.categorizer = IntelligentCategorizer()
        self.category_manager = CategoryManager() if use_category_manager else None
        self.title_inference = TitleInferenceEngine()
        self.confidence_metrics = ConfidenceMetrics()
        # Acceder a las plantillas desde el categorizador
        self.conversation_templates = self.categorizer.conversation_templates
        self.stats = {
            'articles_processed': 0,
            'conversations_generated': 0,
            'categorization_time': 0,
            'conversation_time': 0,
            'conversation_errors': 0
        }
        
    def process_article(self, article: Dict) -> Optional[Dict]:
        """
        Procesa un art√≠culo completo de forma ultra-r√°pida
        Returns: Dict con categor√≠a, subcategor√≠a, conversaciones
        """
        title = article.get('title', '').strip()
        content = article.get('content', '').strip()
        
        if not title or not content or len(content) < 50:
            return None
            
        try:
            # Categorizaci√≥n ultra-r√°pida
            category, subcategory, confidence = self.categorizer.categorize_article_fast(title, content)
            
            # Registrar en CategoryManager si est√° habilitado
            final_category = category
            if self.category_manager:
                final_category = self.category_manager.register_category(category, subcategory)
            
            # Generaci√≥n r√°pida de conversaciones
            conversations = self.categorizer.generate_conversations_fast(title, content, category, subcategory)
            
            # Resultado optimizado
            result = {
                'title': title,
                'category': category,
                'subcategory': subcategory,
                'final_category': final_category,  # Para usar en la escritura de archivos
                'confidence': confidence,
                'conversations': conversations,
                'metadata': {
                    'content_length': len(content),
                    'conversations_count': len(conversations),
                    'processed_at': datetime.now().isoformat()
                }
            }
            
            self.stats['articles_processed'] += 1
            self.stats['conversations_generated'] += len(conversations)
            
            return result
            
        except Exception as e:
            return None
    
    def process_article_batch(self, articles: List[Dict]) -> List[Dict]:
        """Procesa un batch completo de art√≠culos de forma masiva"""
        results = []
        
        for article in articles:
            result = self.process_article(article)
            if result:
                results.append(result)
                
        return results
    
    def finalize_categories(self):
        """Finaliza las categor√≠as si se est√° usando CategoryManager"""
        if self.category_manager:
            self.category_manager.finalize_categories()
    
    def get_final_category(self, category: str, subcategory: str = 'general') -> str:
        """Obtiene la categor√≠a final para un art√≠culo"""
        if self.category_manager:
            return self.category_manager.get_final_category(category, subcategory)
        return f"{category}-{subcategory}" if subcategory != 'general' else category
    
    def get_categories(self) -> List[str]:
        """Lista de categor√≠as disponibles"""
        return ['arte', 'geografia', 'historia', 'ciencias', 'biologia', 'tecnologia', 
                'deportes', 'politica', 'medicina', 'economia', 'educacion', 'general']
    
    def generate_consciencia_category(self, categories_found: list, output_dir: str, total_articles: int = 0) -> dict:
        """Genera la categor√≠a consciencia con reconocimiento de Wikipedia y an√°lisis completo de categor√≠as"""
        
        from pathlib import Path
        import json
        from datetime import datetime
        
        # Obtener categor√≠as reales del CategoryManager si est√° disponible
        if self.category_manager:
            actual_categories = self.category_manager.get_all_categories()
            if actual_categories:
                categories_found = actual_categories
                print(f"üè∑Ô∏è CONSCIENCIA: Usando categor√≠as del CategoryManager: {len(categories_found)} categor√≠as")
            else:
                print(f"üè∑Ô∏è CONSCIENCIA: CategoryManager vac√≠o, usando categor√≠as pasadas: {len(categories_found)} categor√≠as")
        else:
            print(f"üè∑Ô∏è CONSCIENCIA: Sin CategoryManager, usando categor√≠as pasadas: {len(categories_found)} categor√≠as")
        
        # Crear directorio consciencia
        consciencia_dir = Path(output_dir) / "consciencia"
        consciencia_dir.mkdir(parents=True, exist_ok=True)
        
        # Crear conversaciones sobre conocimiento y categor√≠as
        consciencia_conversations = []
        
        # 1. RECONOCIMIENTO DE WIKIPEDIA Y FUENTE DEL CONOCIMIENTO
        wikipedia_article = {
            'title': 'Reconocimiento de Wikipedia como Fuente de Conocimiento',
            'content': f'''Este sistema est√° basado en el conocimiento contenido en Wikipedia, 
            la enciclopedia libre m√°s grande del mundo. Wikipedia representa el conocimiento colaborativo 
            de millones de contribuyentes que han trabajado para crear y mantener art√≠culos sobre 
            pr√°cticamente todos los temas del conocimiento humano. 
            
            El contenido procesado proviene de art√≠culos de Wikipedia en espa√±ol, que contiene informaci√≥n 
            verificable, neutral y de fuentes confiables. Este sistema ha procesado {total_articles:,} art√≠culos 
            de Wikipedia, organiz√°ndolos en {len(categories_found)} categor√≠as principales para facilitar 
            la b√∫squeda y exploraci√≥n del conocimiento.
            
            Wikipedia es una fuente invaluable de conocimiento porque:
            - Contiene informaci√≥n actualizada constantemente
            - Es revisada por una comunidad global de editores
            - Cita fuentes verificables y confiables
            - Mantiene neutralidad en los puntos de vista
            - Es de acceso libre y gratuito para toda la humanidad
            
            Este sistema reconoce y honra el trabajo de todos los editores de Wikipedia que han hecho 
            posible esta vasta base de conocimiento.'''
        }
        
        wikipedia_result = self.process_article(wikipedia_article)
        if wikipedia_result:
            for conv in wikipedia_result['conversations']:
                consciencia_conversations.append({
                    'question': conv['question'],
                    'answer': conv['answer'],
                    'category': 'consciencia',
                    'subcategory': 'reconocimiento_wikipedia',
                    'conversation_type': 'wikipedia_recognition'
                })
        
        # 2. SISTEMA DE CATEGORIZACI√ìN Y ORGANIZACI√ìN DEL CONOCIMIENTO
        categorization_article = {
            'title': 'Sistema de Categorizaci√≥n del Conocimiento',
            'content': f'''Este sistema ha analizado y categorizado {total_articles:,} art√≠culos de Wikipedia 
            en {len(categories_found)} categor√≠as fundamentales. El proceso de categorizaci√≥n utiliza algoritmos 
            inteligentes que analizan el contenido de cada art√≠culo para determinar su categor√≠a m√°s apropiada.
            
            Las categor√≠as fundamentales identificadas representan las principales √°reas del conocimiento humano:
            {", ".join(categories_found)}
            
            El sistema funciona mediante:
            - An√°lisis sem√°ntico del contenido de cada art√≠culo
            - Identificaci√≥n de palabras clave y patrones tem√°ticos
            - Asignaci√≥n a categor√≠as basada en contenido y contexto
            - Organizaci√≥n jer√°rquica del conocimiento
            - Generaci√≥n de conversaciones contextuales para cada tema
            
            Esta organizaci√≥n permite acceso eficiente a informaci√≥n espec√≠fica y facilita la exploraci√≥n 
            interdisciplinaria del conocimiento. Cada categor√≠a contiene art√≠culos especializados con 
            conversaciones dise√±adas para responder preguntas comunes y proporcionar an√°lisis profundos.'''
        }
        
        categorization_result = self.process_article(categorization_article)
        if categorization_result:
            for conv in categorization_result['conversations']:
                consciencia_conversations.append({
                    'question': conv['question'],
                    'answer': conv['answer'],
                    'category': 'consciencia',
                    'subcategory': 'sistema_categorizacion',
                    'conversation_type': 'categorization_explanation'
                })
        
        # 3. EXPLICACI√ìN DETALLADA DE CADA CATEGOR√çA ENCONTRADA
        for i, category in enumerate(categories_found):
            # Obtener informaci√≥n espec√≠fica de cada categor√≠a
            category_info = self._get_category_explanation(category)
            
            category_article = {
                'title': f'Categor√≠a {category.title()}: {category_info["description"]}',
                'content': f'''La categor√≠a "{category}" es una de las {len(categories_found)} categor√≠as fundamentales 
                identificadas en este sistema de conocimiento. 
                
                **Descripci√≥n:** {category_info["description"]}
                
                **Alcance:** {category_info["scope"]}
                
                **Tipos de contenido:** {category_info["content_types"]}
                
                **Importancia:** Esta categor√≠a es fundamental porque {category_info["importance"]}
                
                **Ejemplos de temas:** {category_info["examples"]}
                
                Los art√≠culos en esta categor√≠a han sido procesados y organizados para proporcionar 
                respuestas especializadas sobre {category}. Cada art√≠culo incluye conversaciones 
                contextuales que permiten explorar el tema desde m√∫ltiples perspectivas.
                
                La informaci√≥n en esta categor√≠a proviene de Wikipedia y mantiene los est√°ndares 
                de verificabilidad y neutralidad de la enciclopedia.'''
            }
            
            category_result = self.process_article(category_article)
            if category_result:
                for conv in category_result['conversations']:
                    consciencia_conversations.append({
                        'question': conv['question'],
                        'answer': conv['answer'],
                        'category': 'consciencia',
                        'subcategory': f'explicacion_{category}',
                        'conversation_type': 'category_explanation'
                    })
        
        # 4. CAPACIDADES Y FUNCIONAMIENTO DEL SISTEMA
        capabilities_article = {
            'title': 'Capacidades y Funcionamiento del Sistema de Conocimiento',
            'content': f'''Este sistema de conocimiento est√° dise√±ado para proporcionar acceso inteligente 
            a la informaci√≥n contenida en Wikipedia. Sus capacidades incluyen:
            
            **Capacidades de B√∫squeda:**
            - Respuestas a preguntas espec√≠ficas sobre cualquiera de las {len(categories_found)} categor√≠as
            - An√°lisis profundo de temas mediante conversaciones contextuales
            - Explicaciones detalladas que van desde conceptos b√°sicos hasta an√°lisis avanzados
            - Conexiones interdisciplinarias entre diferentes √°reas del conocimiento
            
            **Organizaci√≥n del Conocimiento:**
            - Categorizaci√≥n autom√°tica de {total_articles:,} art√≠culos de Wikipedia
            - Estructuraci√≥n jer√°rquica por temas y subtemas
            - Generaci√≥n de conversaciones contextuales para cada art√≠culo
            - Mantenimiento de la trazabilidad hacia las fuentes originales de Wikipedia
            
            **Tipos de Respuestas:**
            - Definiciones claras y precisas
            - Explicaciones hist√≥ricas y contextuales
            - Datos geogr√°ficos y demogr√°ficos
            - Informaci√≥n cient√≠fica y t√©cnica
            - An√°lisis cultural y social
            - Biograf√≠as y perfiles detallados
            
            El sistema est√° en constante evoluci√≥n y puede actualizarse con nuevo contenido de Wikipedia 
            para mantener la informaci√≥n actualizada y relevante.'''
        }
        
        capabilities_result = self.process_article(capabilities_article)
        if capabilities_result:
            for conv in capabilities_result['conversations']:
                consciencia_conversations.append({
                    'question': conv['question'],
                    'answer': conv['answer'],
                    'category': 'consciencia',
                    'subcategory': 'capacidades_sistema',
                    'conversation_type': 'system_capabilities'
                })
        
        # Escribir conversaciones en archivos JSONL
        conversations_per_file = 50000
        file_counter = 0
        
        for i in range(0, len(consciencia_conversations), conversations_per_file):
            file_counter += 1
            output_file = consciencia_dir / f"consciencia_{file_counter:04d}.jsonl"
            
            with open(output_file, 'w', encoding='utf-8') as f:
                batch = consciencia_conversations[i:i + conversations_per_file]
                for conv in batch:
                    # Formato de conversaci√≥n est√°ndar
                    conversation_record = {
                        'conversation': [
                            {'role': 'user', 'content': conv['question']},
                            {'role': 'assistant', 'content': conv['answer']}
                        ],
                        'metadata': {
                            'source_article': 'Sistema de Consciencia',
                            'category': 'consciencia',
                            'subcategory': conv['subcategory'],
                            'conversation_type': conv['conversation_type'],
                            'generation_date': datetime.now().isoformat(),
                            'categories_available': categories_found[:20]  # Primeras 20 categor√≠as
                        }
                    }
                    f.write(json.dumps(conversation_record, ensure_ascii=False) + '\n')
        
        # Crear metadata
        metadata_file = consciencia_dir / "metadata_consciencia.json"
        metadata = {
            'category': 'consciencia',
            'total_conversations': len(consciencia_conversations),
            'total_files': file_counter,
            'categories_found': categories_found,
            'total_articles_processed': total_articles,
            'description': 'Conversaciones sobre el conocimiento disponible, reconocimiento de Wikipedia, categorizaci√≥n y capacidades del sistema',
            'generation_date': datetime.now().isoformat(),
            'conversation_types': ['wikipedia_recognition', 'categorization_explanation', 'category_explanation', 'system_capabilities'],
            'note': 'Categor√≠a consciencia: Conocimiento sobre el sistema y sus fuentes'
        }
        
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        return {
            'total_conversations': len(consciencia_conversations),
            'total_files': file_counter,
            'categories_described': len(categories_found),
            'output_directory': str(consciencia_dir)
        }
    
    def _get_category_explanation(self, category: str) -> dict:
        """Proporciona explicaciones detalladas para cada categor√≠a"""
        explanations = {
            'arte': {
                'description': 'Creaciones y expresiones culturales humanas',
                'scope': 'M√∫sica, pintura, literatura, teatro, danza, escultura, arquitectura, cine y todas las formas de expresi√≥n art√≠stica',
                'content_types': 'Biograf√≠as de artistas, obras espec√≠ficas, movimientos art√≠sticos, t√©cnicas, historia del arte',
                'importance': 'representa la creatividad y expresi√≥n cultural de la humanidad a lo largo de la historia',
                'examples': 'pintores famosos, √°lbumes musicales, obras literarias, pel√≠culas, esculturas, movimientos art√≠sticos'
            },
            'geografia': {
                'description': 'Estudio de lugares, territorios y caracter√≠sticas terrestres',
                'scope': 'Pa√≠ses, ciudades, regiones, caracter√≠sticas f√≠sicas, demograf√≠a, clima, recursos naturales',
                'content_types': 'Informaci√≥n sobre lugares, datos demogr√°ficos, caracter√≠sticas geogr√°ficas, recursos naturales',
                'importance': 'nos ayuda a entender nuestro mundo, ubicaciones, culturas y caracter√≠sticas territoriales',
                'examples': 'pa√≠ses, ciudades, monta√±as, r√≠os, regiones, capitales, fronteras'
            },
            'historia': {
                'description': 'Registro y an√°lisis de eventos y personalidades del pasado',
                'scope': 'Biograf√≠as, eventos hist√≥ricos, per√≠odos, civilizaciones, guerras, revoluciones',
                'content_types': 'Biograf√≠as de personajes hist√≥ricos, descripciones de eventos, an√°lisis de per√≠odos',
                'importance': 'preserva la memoria humana y nos ayuda a entender el presente a trav√©s del pasado',
                'examples': 'personajes hist√≥ricos, guerras, revoluciones, imperios, descubrimientos, fechas importantes'
            },
            'ciencias': {
                'description': 'Conocimiento sistem√°tico sobre el mundo natural y t√©cnico',
                'scope': 'F√≠sica, qu√≠mica, matem√°ticas, investigaci√≥n, teor√≠as, descubrimientos cient√≠ficos',
                'content_types': 'Teor√≠as cient√≠ficas, biograf√≠as de cient√≠ficos, experimentos, descubrimientos',
                'importance': 'expande nuestro entendimiento del universo y permite el progreso tecnol√≥gico',
                'examples': 'teor√≠as cient√≠ficas, cient√≠ficos famosos, experimentos, descubrimientos, leyes naturales'
            },
            'biologia': {
                'description': 'Estudio de los seres vivos y sus procesos',
                'scope': 'Especies animales y vegetales, ecosistemas, evoluci√≥n, gen√©tica, anatom√≠a',
                'content_types': 'Descripciones de especies, informaci√≥n sobre ecosistemas, procesos biol√≥gicos',
                'importance': 'nos ayuda a entender la vida en todas sus formas y nuestra relaci√≥n con otros seres vivos',
                'examples': 'especies animales, plantas, ecosistemas, procesos evolutivos, caracter√≠sticas biol√≥gicas'
            },
            'tecnologia': {
                'description': 'Herramientas, sistemas y procesos t√©cnicos',
                'scope': 'Computaci√≥n, internet, software, hardware, innovaciones tecnol√≥gicas',
                'content_types': 'Informaci√≥n sobre tecnolog√≠as, empresas tecnol√≥gicas, innovaciones',
                'importance': 'transforma la manera en que vivimos, trabajamos y nos comunicamos',
                'examples': 'computadoras, software, internet, aplicaciones, empresas tecnol√≥gicas'
            },
            'deportes': {
                'description': 'Actividades f√≠sicas competitivas y recreativas',
                'scope': 'Diferentes disciplinas deportivas, equipos, competiciones, atletas',
                'content_types': 'Informaci√≥n sobre deportes, equipos, atletas, competiciones, reglas',
                'importance': 'promueve la salud, la competencia sana y la uni√≥n social a trav√©s del deporte',
                'examples': 'f√∫tbol, basketball, olimpiadas, equipos deportivos, atletas famosos'
            },
            'politica': {
                'description': 'Organizaci√≥n del poder y gobierno en las sociedades',
                'scope': 'Gobiernos, pol√≠ticos, partidos, sistemas pol√≠ticos, elecciones',
                'content_types': 'Biograf√≠as de pol√≠ticos, informaci√≥n sobre gobiernos, sistemas pol√≠ticos',
                'importance': 'define c√≥mo se organizan las sociedades y se toman decisiones colectivas',
                'examples': 'presidentes, gobiernos, partidos pol√≠ticos, elecciones, sistemas de gobierno'
            },
            'medicina': {
                'description': 'Ciencia y pr√°ctica de la salud humana',
                'scope': 'Enfermedades, tratamientos, anatom√≠a, medicina preventiva, investigaci√≥n m√©dica',
                'content_types': 'Informaci√≥n sobre enfermedades, tratamientos, procedimientos m√©dicos',
                'importance': 'preserva y mejora la salud humana, combate enfermedades y extiende la vida',
                'examples': 'enfermedades, tratamientos, medicamentos, procedimientos m√©dicos, especialidades m√©dicas'
            },
            'economia': {
                'description': 'Sistemas de producci√≥n, distribuci√≥n y consumo',
                'scope': 'Empresas, mercados, comercio, finanzas, sistemas econ√≥micos',
                'content_types': 'Informaci√≥n sobre empresas, mercados, teor√≠as econ√≥micas, sistemas financieros',
                'importance': 'organiza los recursos y la actividad econ√≥mica de las sociedades',
                'examples': 'empresas, mercados, monedas, comercio, sistemas econ√≥micos'
            },
            'educacion': {
                'description': 'Procesos de ense√±anza y aprendizaje',
                'scope': 'Instituciones educativas, m√©todos pedag√≥gicos, sistemas educativos',
                'content_types': 'Informaci√≥n sobre universidades, escuelas, m√©todos educativos, pedagog√≠a',
                'importance': 'transmite conocimiento y habilidades para el desarrollo personal y social',
                'examples': 'universidades, escuelas, m√©todos de ense√±anza, sistemas educativos'
            },
            'general': {
                'description': 'Conocimiento diverso que no se limita a categor√≠as espec√≠ficas',
                'scope': 'Temas variados, conceptos multidisciplinarios, informaci√≥n general',
                'content_types': 'Informaci√≥n diversa, conceptos generales, temas multidisciplinarios',
                'importance': 'abarca conocimiento que conecta diferentes √°reas y proporciona contexto general',
                'examples': 'conceptos generales, temas multidisciplinarios, informaci√≥n diversa'
            }
        }
        
        return explanations.get(category, {
            'description': f'√Årea especializada del conocimiento: {category}',
            'scope': f'Temas relacionados con {category} y sus subdisciplinas',
            'content_types': f'Informaci√≥n especializada sobre {category}',
            'importance': f'contribuye al conocimiento humano en el √°rea de {category}',
            'examples': f'temas espec√≠ficos de {category}'
        })
    
    def get_stats(self) -> Dict:
        """Estad√≠sticas del procesador"""
        stats = self.stats.copy()
        if self.category_manager:
            stats['category_stats'] = self.category_manager.get_category_stats()
        return stats
